name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build_dependencies:
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./example-app
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10" 
      - name: Cache build venv for job1
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/work/<path>/example-app/.venv
            ~/.poetry
          key: ${{ runner.os }}-venv-job1-${{ hashFiles('**') }}
          restore-keys: |
            ${{ runner.os }}-venv-job1-
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
      #    export PATH="$HOME/.poetry/bin:$PATH"
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install flake8 pytest
            if [ -f requirements.txt ]; then
              if [ "$RUNNER_OS" == "Windows" ]; then
                pip install -r requirements.txt
              else
                pip install -r requirements.txt
              fi
            fi
        shell: bash
        env:
          pythonLocation: ${{ runner.os == 'Windows' && 'C:\\hostedtoolcache\\windows\\Python\\3.10.11\\x64' || '/usr/bin/python3' }}
      - name: Install Poetry Action
        uses: snok/install-poetry@v1.3.4
      - name: Poetry dependencies
        run: |
          poetry install --no-root
        shell: bash
        env:
          pythonLocation: ${{ runner.os == 'Windows' && 'C:\\hostedtoolcache\\windows\\Python\\3.10.11\\x64' || '/usr/bin/python3' }}
          VENV: .venv/scripts/activate

  static_tests:
    runs-on: ${{ matrix.os }}
    needs: build_dependencies
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    steps:
      - uses: actions/checkout@v3
      - name: Cache venv for static tests
        id: cached-poetry-dependencies-static-tests
        uses: actions/cache@v3
        with:
          path: |
            /home/runner/work/<path>/example-app/.venv
            ~/.poetry
          key: ${{ runner.os }}-venv-static-tests-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-venv-static-tests-
      #- name: Export PATH for static tests
      #  run: |
      #    export PATH="$HOME/.poetry/bin:$PATH"
      - name: Install Flake8
        run: |
          pip install flake8
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  
  
  unit_tests:
    runs-on: ${{ matrix.os }}
    needs: static_tests
    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
    defaults:
      run:
        working-directory: ./example-app
    steps:
    - uses: actions/checkout@v3
    - name: Install Poetry for unit tests
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
    #    export PATH="$HOME/.poetry/bin:$PATH"
    - name: Install pytest
      run: |
        pip install pytest
    - name: Poetry dependencies
      run: poetry install --no-root
    - name: Run task lint
      run: |
        poetry run task lint
    - name: Run task test
      run: |
        poetry run task test
    - name: Run tests with pytest
      run: |
        pytest
